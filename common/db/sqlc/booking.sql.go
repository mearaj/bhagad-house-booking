// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: booking.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (start_date,
                      end_date,
                      customer_id,
                      rate,
                      rate_time_unit)
VALUES ($1, $2, $3,$4,$5)
RETURNING id, created_at, updated_at, start_date, end_date, customer_id, rate, rate_time_unit
`

type CreateBookingParams struct {
	StartDate    sql.NullTime    `json:"start_date"`
	EndDate      sql.NullTime    `json:"end_date"`
	CustomerID   sql.NullInt64   `json:"customer_id"`
	Rate         sql.NullFloat64 `json:"rate"`
	RateTimeUnit RateTimeUnits   `json:"rate_time_unit"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, createBooking,
		arg.StartDate,
		arg.EndDate,
		arg.CustomerID,
		arg.Rate,
		arg.RateTimeUnit,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartDate,
		&i.EndDate,
		&i.CustomerID,
		&i.Rate,
		&i.RateTimeUnit,
	)
	return i, err
}

const deleteBooking = `-- name: DeleteBooking :exec
DELETE FROM bookings WHERE id = $1
`

func (q *Queries) DeleteBooking(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBooking, id)
	return err
}

const getBooking = `-- name: GetBooking :one
SELECT id, created_at, updated_at, start_date, end_date, customer_id, rate, rate_time_unit FROM bookings
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBooking(ctx context.Context, id int64) (Booking, error) {
	row := q.db.QueryRowContext(ctx, getBooking, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartDate,
		&i.EndDate,
		&i.CustomerID,
		&i.Rate,
		&i.RateTimeUnit,
	)
	return i, err
}

const listBookings = `-- name: ListBookings :many
SELECT id, created_at, updated_at, start_date, end_date, customer_id, rate, rate_time_unit FROM bookings
ORDER BY start_date desc
LIMIT $1
OFFSET $2
`

type ListBookingsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBookings(ctx context.Context, arg ListBookingsParams) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, listBookings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartDate,
			&i.EndDate,
			&i.CustomerID,
			&i.Rate,
			&i.RateTimeUnit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBooking = `-- name: UpdateBooking :one
UPDATE bookings SET start_date = $2, end_date = $3,customer_id = $4, rate = $5, rate_time_unit = $6
WHERE id = $1
RETURNING id, created_at, updated_at, start_date, end_date, customer_id, rate, rate_time_unit
`

type UpdateBookingParams struct {
	ID           int64           `json:"id"`
	StartDate    sql.NullTime    `json:"start_date"`
	EndDate      sql.NullTime    `json:"end_date"`
	CustomerID   sql.NullInt64   `json:"customer_id"`
	Rate         sql.NullFloat64 `json:"rate"`
	RateTimeUnit RateTimeUnits   `json:"rate_time_unit"`
}

func (q *Queries) UpdateBooking(ctx context.Context, arg UpdateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, updateBooking,
		arg.ID,
		arg.StartDate,
		arg.EndDate,
		arg.CustomerID,
		arg.Rate,
		arg.RateTimeUnit,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartDate,
		&i.EndDate,
		&i.CustomerID,
		&i.Rate,
		&i.RateTimeUnit,
	)
	return i, err
}
