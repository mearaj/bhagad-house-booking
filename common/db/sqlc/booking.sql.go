// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: booking.sql

package sqlc

import (
	"context"
	"time"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (start_date,
                      end_date,
                      details)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, start_date, end_date, details
`

type CreateBookingParams struct {
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	Details   string    `json:"details"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, createBooking, arg.StartDate, arg.EndDate, arg.Details)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartDate,
		&i.EndDate,
		&i.Details,
	)
	return i, err
}

const deleteBooking = `-- name: DeleteBooking :exec
DELETE
FROM bookings
WHERE id = $1
`

func (q *Queries) DeleteBooking(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBooking, id)
	return err
}

const getBooking = `-- name: GetBooking :one
SELECT id, created_at, updated_at, start_date, end_date, details
FROM bookings
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBooking(ctx context.Context, id int64) (Booking, error) {
	row := q.db.QueryRowContext(ctx, getBooking, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartDate,
		&i.EndDate,
		&i.Details,
	)
	return i, err
}

const getConflictingBookings = `-- name: GetConflictingBookings :many
SELECT id, created_at, updated_at, start_date, end_date, details
FROM bookings
WHERE (start_date <= $1 AND end_date >= $1) OR
    (end_date >= $2 AND start_date <= $2)
`

type GetConflictingBookingsParams struct {
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) GetConflictingBookings(ctx context.Context, arg GetConflictingBookingsParams) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, getConflictingBookings, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Booking{}
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartDate,
			&i.EndDate,
			&i.Details,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBookings = `-- name: ListBookings :many
SELECT id, created_at, updated_at, start_date, end_date, details
FROM bookings
WHERE (start_date <= $1 AND end_date >= $2) OR
    (start_date >= $1 AND end_date >= $2) OR
    (start_date <= $1 AND end_date <= $2) OR
    (start_date >= $1 AND end_date <= $2)
ORDER BY start_date
`

type ListBookingsParams struct {
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) ListBookings(ctx context.Context, arg ListBookingsParams) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, listBookings, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Booking{}
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartDate,
			&i.EndDate,
			&i.Details,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBooking = `-- name: UpdateBooking :one
UPDATE bookings
SET start_date     = $2,
    end_date       = $3,
    details    = $4
WHERE id = $1
RETURNING id, created_at, updated_at, start_date, end_date, details
`

type UpdateBookingParams struct {
	ID        int64     `json:"id"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	Details   string    `json:"details"`
}

func (q *Queries) UpdateBooking(ctx context.Context, arg UpdateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, updateBooking,
		arg.ID,
		arg.StartDate,
		arg.EndDate,
		arg.Details,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartDate,
		&i.EndDate,
		&i.Details,
	)
	return i, err
}
