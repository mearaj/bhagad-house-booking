// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (
    name,
    email,
    password
)
VALUES ($1, $2, $3)
RETURNING id, password, name, email, email_verified, password_changed_at, created_at, roles
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		pq.Array(&i.Roles),
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, password, name, email, email_verified, password_changed_at, created_at, roles
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		pq.Array(&i.Roles),
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, password, name, email, email_verified, password_changed_at, created_at, roles
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		pq.Array(&i.Roles),
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, password, name, email, email_verified, password_changed_at, created_at, roles
FROM users
ORDER BY name
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Password,
			&i.Name,
			&i.Email,
			&i.EmailVerified,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			pq.Array(&i.Roles),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    name    = $2,
    email    = $3,
    email_verified = $4
WHERE id = $1
RETURNING id, password, name, email, email_verified, password_changed_at, created_at, roles
`

type UpdateUserParams struct {
	ID            int64  `json:"id"`
	Name          string `json:"name"`
	Email         string `json:"email"`
	EmailVerified bool   `json:"email_verified"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.EmailVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		pq.Array(&i.Roles),
	)
	return i, err
}
